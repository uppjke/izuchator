import type { NextConfig } from "next";
import { networkInterfaces } from "os";

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è development
function getAllowedOrigins(): string[] {
  const baseOrigins = ['localhost', '127.0.0.1'];
  
  // –í production –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ
  if (process.env.NODE_ENV === 'production') {
    return baseOrigins;
  }
  
  // –í development –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ IP
  try {
    const nets = networkInterfaces();
    const localIPs: string[] = [];
    
    for (const name of Object.keys(nets)) {
      const netInterface = nets[name];
      if (netInterface) {
        for (const net of netInterface) {
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ IPv4 –∞–¥—Ä–µ—Å–∞, –∏—Å–∫–ª—é—á–∞—è loopback
          if (net.family === 'IPv4' && !net.internal) {
            localIPs.push(net.address);
          }
        }
      }
    }
    
    console.log(`üåê Allowed origins: ${[...baseOrigins, ...localIPs].join(', ')}`);
    return [...baseOrigins, ...localIPs];
  } catch (error) {
    console.warn('‚ö†Ô∏è  Could not detect network interfaces, using defaults');
    return baseOrigins;
  }
}

const nextConfig: NextConfig = {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ origins
  allowedDevOrigins: getAllowedOrigins(),
};

export default nextConfig;
