import { createServer } from 'node:http'
import { Server as SocketIOServer } from 'socket.io'
import Redis from 'ioredis'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface UserPresence {
  userId: string
  socketId: string
  lastSeen: number
  roomId: string
}

interface PresenceMessage {
  type: 'join' | 'leave' | 'heartbeat'
  userId: string
  timestamp: number
}

/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Socket.io + Redis —Å–µ—Ä–≤–µ—Ä –¥–ª—è presence tracking
 * Enterprise-grade —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
 */
class PresenceServer {
  private io: SocketIOServer
  private redis: Redis
  private server: ReturnType<typeof createServer>
  private userPresence = new Map<string, UserPresence>() // socketId -> UserPresence
  private userSockets = new Map<string, string>() // userId -> socketId
  private cleanupInterval: NodeJS.Timeout | null = null

  constructor(port: number = 3002) {
    // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    this.server = createServer()
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Socket.io —Å CORS –¥–ª—è Next.js –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    this.io = new SocketIOServer(this.server, {
      cors: {
        origin: process.env.NODE_ENV === 'production' 
          ? ['https://izuchator.ru', 'https://www.izuchator.ru']
          : true, // –í development —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins
        methods: ['GET', 'POST'],
        credentials: true,
        allowedHeaders: ['*']
      },
      transports: ['websocket', 'polling'], // Fallback –Ω–∞ polling –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
      pingTimeout: 60000,
      pingInterval: 25000,
      allowEIO3: true // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    })

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
    this.redis = new Redis({
      host: process.env.REDIS_HOST || 'localhost',
      port: parseInt(process.env.REDIS_PORT || '6379'),
      password: process.env.REDIS_PASSWORD,
      lazyConnect: true
    })

    this.setupEventHandlers()
    this.startCleanupTimer()
    
    this.server.listen(port, '0.0.0.0', () => {
      console.log(`üöÄ Presence server running on port ${port}`)
      console.log(`üìç Available at:`)
      console.log(`   - http://localhost:${port}`)
      console.log(`   - http://127.0.0.1:${port}`)
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
      const { networkInterfaces } = require('os')
      const nets = networkInterfaces()
      
      for (const name of Object.keys(nets)) {
        for (const net of nets[name]!) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ IPv4 –∞–¥—Ä–µ—Å–∞, –∏—Å–∫–ª—é—á–∞—è internal
          if (net.family === 'IPv4' && !net.internal) {
            console.log(`   - http://${net.address}:${port}`)
          }
        }
      }
    })
  }

  private setupEventHandlers() {
    this.io.on('connection', (socket) => {
      console.log(`Socket connected: ${socket.id}`)

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      socket.on('join-presence', async (data: { userId: string }) => {
        await this.handleUserJoin(socket, data.userId)
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ heartbeat
      socket.on('heartbeat', async (data: { userId: string }) => {
        await this.handleHeartbeat(socket.id, data.userId)
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      socket.on('disconnect', async () => {
        await this.handleUserLeave(socket.id)
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ manual leave
      socket.on('leave-presence', async () => {
        await this.handleUserLeave(socket.id)
      })
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Redis
    this.redis.on('error', (err) => {
      console.error('Redis connection error:', err)
    })

    this.redis.on('connect', () => {
      console.log('üì° Connected to Redis')
    })
  }

  private async handleUserJoin(socket: any, userId: string) {
    try {
      const now = Date.now()
      const roomId = 'global-presence'

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const existingSocketId = this.userSockets.get(userId)
      if (existingSocketId && existingSocketId !== socket.id) {
        await this.handleUserLeave(existingSocketId)
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
      const presence: UserPresence = {
        userId,
        socketId: socket.id,
        lastSeen: now,
        roomId
      }

      this.userPresence.set(socket.id, presence)
      this.userSockets.set(userId, socket.id)

      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –∫–æ–º–Ω–∞—Ç–µ
      socket.join(roomId)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–æ–≤
      await this.redis.setex(`presence:${userId}`, 120, JSON.stringify({
        lastSeen: now,
        serverId: process.env.SERVER_ID || 'default'
      }))

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      await this.broadcastPresenceUpdate()

      console.log(`User ${userId} joined presence (socket: ${socket.id})`)
    } catch (error) {
      console.error('Error handling user join:', error)
    }
  }

  private async handleHeartbeat(socketId: string, userId: string) {
    const presence = this.userPresence.get(socketId)
    if (presence && presence.userId === userId) {
      presence.lastSeen = Date.now()
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ Redis
      await this.redis.setex(`presence:${userId}`, 120, JSON.stringify({
        lastSeen: presence.lastSeen,
        serverId: process.env.SERVER_ID || 'default'
      }))
    }
  }

  private async handleUserLeave(socketId: string) {
    try {
      const presence = this.userPresence.get(socketId)
      if (!presence) return

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö
      this.userPresence.delete(socketId)
      this.userSockets.delete(presence.userId)

      // –£–¥–∞–ª—è–µ–º –∏–∑ Redis
      await this.redis.del(`presence:${presence.userId}`)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
      await this.broadcastPresenceUpdate()

      console.log(`User ${presence.userId} left presence (socket: ${socketId})`)
    } catch (error) {
      console.error('Error handling user leave:', error)
    }
  }

  private async broadcastPresenceUpdate() {
    try {
      // –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const onlineUsers = Array.from(this.userPresence.values()).map(p => p.userId)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
      this.io.to('global-presence').emit('presence-update', {
        onlineUsers,
        timestamp: Date.now()
      })
    } catch (error) {
      console.error('Error broadcasting presence update:', error)
    }
  }

  private startCleanupTimer() {
    // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.cleanupInterval = setInterval(async () => {
      const now = Date.now()
      const TIMEOUT = 90000 // 1.5 –º–∏–Ω—É—Ç—ã

      let hasChanges = false

      for (const [socketId, presence] of this.userPresence) {
        if (now - presence.lastSeen > TIMEOUT) {
          await this.handleUserLeave(socketId)
          hasChanges = true
        }
      }

      if (hasChanges) {
        await this.broadcastPresenceUpdate()
      }
    }, 30000)
  }

  public async shutdown() {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval)
    }
    
    await this.redis.quit()
    this.server.close()
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const port = parseInt(process.env.PRESENCE_PORT || '3002')
  new PresenceServer(port)
}

export default PresenceServer
