'use client'

import { useEffect, useState, useRef } from 'react'
import { io, Socket } from 'socket.io-client'
import { useSession } from 'next-auth/react'

interface PresenceState {
  onlineUsers: Set<string>
  isUserOnline: (userId: string) => boolean
  isTracking: boolean
}

/**
 * Modern presence hook using Socket.io + Redis
 * Enterprise-grade —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
 */
export function usePresence(): PresenceState {
  const { data: session } = useSession()
  const [onlineUsers, setOnlineUsers] = useState<Set<string>>(new Set())
  const [isTracking, setIsTracking] = useState(false)
  const socketRef = useRef<Socket | null>(null)
  const heartbeatRef = useRef<NodeJS.Timeout | null>(null)

  useEffect(() => {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    if (!session?.user?.id) {
      setIsTracking(false)
      return
    }

    const userId = session.user.id
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
    
    // –°–æ–∑–¥–∞–µ–º Socket.io –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const socket = io(process.env.NEXT_PUBLIC_PRESENCE_SERVER || 'http://192.168.1.14:3002', {
      transports: isMobile ? ['polling', 'websocket'] : ['websocket', 'polling'], // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö prioritize polling
      timeout: 15000,
      forceNew: false,
      autoConnect: true,
      upgrade: !isMobile, // –û—Ç–∫–ª—é—á–∞–µ–º upgrade –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
      rememberUpgrade: false,
      reconnection: true,
      reconnectionAttempts: 3,
      reconnectionDelay: 1000,
      withCredentials: false // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    })

    socketRef.current = socket

    socket.on('connect', () => {
      console.log('üöÄ Connected to presence server')
      console.log('üì± User agent:', navigator.userAgent)
      console.log('üì∂ Transport:', (socket as { io?: { engine?: { transport?: { name?: string } } } }).io?.engine?.transport?.name)
      setIsTracking(true)
      
      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ presence tracking
      socket.emit('join-presence', { userId })

      // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      heartbeatRef.current = setInterval(() => {
        if (socket.connected) {
          socket.emit('heartbeat', { userId })
        }
      }, 30000)
    })

    socket.on('presence-update', (data: { onlineUsers: string[], timestamp: number }) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      setOnlineUsers(new Set(data.onlineUsers))
      console.log('üì° Presence updated:', data.onlineUsers.length, 'users online')
    })

    socket.on('disconnect', (reason) => {
      console.log('‚ùå Disconnected from presence server:', reason)
      setIsTracking(false)
      setOnlineUsers(new Set())
      
      if (heartbeatRef.current) {
        clearInterval(heartbeatRef.current)
        heartbeatRef.current = null
      }
    })

    socket.on('connect_error', (error) => {
      console.error('üî¥ Presence connection error:', error)
      console.error('üî¥ Error details:', {
        message: error.message,
        name: error.name
      })
      setIsTracking(false)
    })

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (heartbeatRef.current) {
        clearInterval(heartbeatRef.current)
      }
      
      if (socket.connected) {
        socket.emit('leave-presence')
      }
      
      socket.disconnect()
    }
  }, [session?.user?.id])

  const isUserOnline = (userId: string) => onlineUsers.has(userId)

  return {
    onlineUsers,
    isUserOnline,
    isTracking
  }
}
